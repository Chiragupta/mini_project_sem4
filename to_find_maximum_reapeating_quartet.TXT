#include<stdio.h>
#include<conio.h>
#include<process.h>
#include<string.h>
#include<malloc.h>
int k;
 typedef struct node 
{
	char info;
	struct node *next;
}node;
node *insert(node *,char);                        
void string(node *,node *);                          
int compare(char [],node *,node *);                   
int result_compute(int ,char [],int ,char [],char eq_result[][50]);
void display(int ,char [], char eq_result[][50]);
void main()
{
	node *first=NULL,*last=NULL,*p;
    FILE *fp;
    char filename[10],ch;
    printf("enter file name\n");
	scanf("%s",filename);
	fp=fopen(filename,"r");
	while((ch=fgetc(fp))!=EOF)
	{
		if((ch>=97&&ch<=122 ) || (ch>=48 && ch<=57) || (ch>=91&&ch<=96))
		{
			last=insert(last,ch);
		}
		
		
		else if((ch>=35 && ch<=38) || (ch>=40 && ch<=43) || ch==45 || ch==47 )
		last=insert(last,ch);
		
		
		else if((ch>=60 && ch<=62) || ch==64 || (ch>=91 && ch<=95)|| ch==126 || ch==33)
		last=insert(last,ch);
		
		
		else if(ch>=65&&ch<=90)
		{
			last=insert(last,ch+32);
		}
	    else if(ch=='\n' && last->info!=' ')
		{
			if(last->info!=' '|| last->info!='.')
			{
				ch=' ';
				last=insert(last,ch);
			}
		}
		else if(ch==' ')
		{
			if(last->info!=' ')
			{
				last=insert(last,ch);
			}
			else if(last->info==39)
			last->info=' ';
		}
		else if(ch=='.' ||ch==59 || ch==63)
		{
			if(last->info==' ' || last->info==39 )
			{
				last->info='.';
			}
			else
			{
				last=insert(last,'.');
			}
		}
		else if(ch==39)
		{
			if(last->info!=' ')
			last=insert(last,ch);
		}
		if(first==NULL)
		{
			first=last;
		}
	//	printf("%c\n",last->info);
	}
	fclose(fp);
	string(first,last);
	getch();
}
node *insert(node *last,char ch)
{
	node *p=NULL;
	p=(node *)malloc(sizeof(node));
	if(p!=NULL)
	{
		p->info=ch;
		p->next=NULL;
	}
	if(last==NULL)
	{
		last=p;
	}
	else
	{
		last->next=p;
		last=p;
	}
	return last;
}
void string(node *first,node *last)
{
	node *temp1=first,*temp2=first;
	int i=0,c=0,count=0,temp=0;
	char arr_to_com[50],ch,result[50],eq_result[100][50];
	while(1)
	{
	    i=0;
	    c=0;
		while(c!=4)
		{
			
			if(ch=='.' && (temp1->info==' '|| temp1==0))
		    {
			   temp2=temp1->next;
			   temp1=temp1->next;
		    }
		   
			ch=temp1->info;
			//printf("%c\n%d\n",ch,c);
			temp1=temp1->next;
			arr_to_com[i++]=ch;
			if(c<1)
			{
				temp2=temp2->next;
			}
			if(ch==' ')
			{
				c++;
			}
			else if(ch=='.' && c==3)
			{
				if( temp1->info==' ')
				{
				arr_to_com[i-1]='\0';
				printf("%s\n",arr_to_com);
				c++;
				break;
			    }
			}
			else if(temp1==last)
			{
				if( c==3)
				{
				arr_to_com[i]='\0';
				printf("%s\n",arr_to_com);
				c++;
				break;
			    }
			}
			if(ch=='.' && c<4)
			{
				if(temp1==0 || temp1->info==' ')
				break;
			}
			if(c==4)
			{
				arr_to_com[i-1]='\0';
			}
		}
		
		if(c==4)
		{
			printf("%s\n",arr_to_com);
			temp=compare(arr_to_com,first,last);
		    count= result_compute(temp, arr_to_com, count, result, eq_result);
		}
		if(temp1==NULL)
		break;
		if((ch==' ' ) && c==4)
		{
			temp1=temp2;
		}
		
	}
	printf("\n\tMOST REPEATING QUARTETS ARE\n");
    display(count,result,eq_result);
}
int compare(char arr_to_com[],node *first,node *last)
{
	int i=0,c=0,count=0;
	char ch;
	node *temp1=first,*temp2=first;
	while(1)
	{
	    i=0;
	    c=0;
		while(c!=4)
		{
			if(ch=='.' && temp1->info==' ')
		    {
			   temp2=temp1->next;
			   temp1=temp1->next;
		    }
			ch=temp1->info;
			temp1=temp1->next;
			if(c<1)
			{
				temp2=temp2->next;
			}
			if((ch==' ' || ch=='.') && arr_to_com[i]=='\0')
			{
				c++;
				count++;
				break;
			}
			else if(ch!=arr_to_com[i])
			{
			break;
	    	}
			else if(ch==' ')
			{
				c++;
			}
			i++;
			fflush(stdin);
		}
		if(temp1==NULL)
	    break;
	    if((ch==' ') && c==4)
	    {
	    	temp1=temp2;
		}
	}
//	printf("\n%d",count);
//	printf("\n%s",arr_to_com);
	return(count);
}
int result_compute(int temp,char arr_to_com[],int count,char result[],char eq_result[][50])
{
	static int j=0;
	int c;
//	printf("\n%d",temp);
	if(temp>count)
	{
		count=temp;
		strcpy(result,arr_to_com);
		j=0;
		k=-1;
	} 
	else if(temp==count && strcmp(result,arr_to_com)!=0)
	{
	    k=0;
		if(j!=0)
		{
		
		for(k=0;k<=j;k++)
		{
			if(strcmp(eq_result[k],arr_to_com)==0)
			{
			k=j;
			return count;
		    }
		}
       }
		k=j+1;
		strcpy(eq_result[k-1],arr_to_com);
		j++;
	}
//	printf("\n%d\t%d",count,k);
	return count;
}
void display(int count,char result[],char eq_result[][50])
{
	int j;
	//printf("\n%d",k);
	if(k==-1)
	{
		printf("\t%s\t%d\n",result,count);
	}
	else if(k>=0)
	{
		for(j=0;j<k;j++)
		{
			printf("\t%s\t%d\n",eq_result[j],count);
		}
		printf("\t%s\t%d\n",result,count);
	}
}